1. Дайте определение массиву. Как осуществляется индексация элементов массива. Как необходимо обращаться к i-му
элементу массива?
----------------------------------------------------------------------------------------------------------------
Массив представляет набор однотипных значений. Объявление массива похоже на объявление обычной переменной
, которая хранит одиночное значение, причем есть два способа объявления массива:

тип_данных название_массива[];
// либо
тип_данных[] название_массива;
Например, определим массив чисел:

Создание массива производится с помощью следующей конструкции: new тип_данных[количество_элементов], где new -
ключевое слово, выделяющее память для указанного в скобках количества элементов. Например, nums = new int[4]; -
в этом выражении создается массив из четырех элементов int, и каждый элемент будет иметь значение
по умолчанию - число 0.

Также можно сразу при объявлении массива инициализировать его:
int nums[] = new int[4];    // массив из 4 чисел
int[] nums2 = new int[5];   // массив из 5 чисел
П
ри подобной инициализации все элементы массива имеют значение по умолчанию. Для числовых типов
(в том числе для типа char) это число 0, для типа boolean это значение false, а для остальных объектов это
значение null. Например, для типа int значением по умолчанию является число 0, поэтому выше определенный
массив nums будет состоять из четырех нулей.

Однако также можно задать конкретные значения для элементов массива при его создании:

// эти два способа равноценны
int[] nums = new int[] { 1, 2, 3, 5 };
int[] nums2 = { 1, 2, 3, 5 };
Стоит отметить, что в этом случае в квадратных скобках не указывается размер массива, так как он вычисляется по
количеству элементов в фигурных скобках.

После создания массива мы можем обратиться к любому его элементу по индексу,
который передается в квадратных скобках после названия переменной массива

2. Приведите способы объявления и инициализации одномерных и двумерных массивов примитивных и ссылочных
типов. Укажите разницу, между массивами примитивных и ссылочных типов.
---------------------------------------------------------------------------------------------------------------
Одномерные массивы - см. пред. ответ.
Ранее мы рассматривали одномерные массивы, которые можно представить как цепочку или строку однотипных значений.
Но кроме одномерных массивов также бывают и многомерными. Наиболее известный многомерный массив -
таблица, представляющая двухмерный массив:

int[][] nums2 = { { 0, 1, 2 }, { 3, 4, 5 } };

3. Объясните, что значит клонирование массива, как в Java можно клонировать массив, в чем состоит разница в
клонировании массивов примитивных и ссылочных типов.
-----------------------------------------------------------------------------------------------------------------
При необходимости одну переменную массива можно скопировать в другую, но в этому случае обе переменные будут
ссылаться на один и тот же массив.

Если необходимо скопировать все элементы одного массива в другой, следует использовать метод copyTo() из класса
Arrays. Его вызов выглядит следующим образом:

int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);
Вторым параметром является длина нового массива. Обычно этот метод применяется для увеличения размера массива:

luckyNumbers = Arrays.copyOf(luckyNumbers, 2 * luckyNumbers.length);

Дополнительные элементы заполняются нулями, если массив содержит числа, и false - если значения типа boolean.
В противоположность этому, если длина нового массива меньше длины исходного, то копируются только начальные
элементы.

По умолчанию, все массивы являются объектами, т.е. поддерживают методы класса java.lang.Object.
Массивы также наследуют интерфейсы java.lang.Cloneable, java.io.Serializable. Для массивов переопределен метод
clone(), который проводит поэлементное копирование.

4. Объясните, что представляет собой двумерных массив в Java, что такое “рваный массив”. Как узнать количество
строк и количество элементов в каждой строке для “рваного” массива?
----------------------------------------------------------------------------------------------------------------
Многомерные массивы могут быть также представлены как "зубчатые массивы". В вышеприведенном примере двухмерный
массив имел 3 строчки и три столбца, поэтому у нас получалась ровная таблица. Но мы можем каждому элементу в
двухмерном массиве присвоить отдельный массив с различным количеством элементов:

int[][] nums = new int[3][];
nums[0] = new int[2];
nums[1] = new int[3];
nums[2] = new int[5];

nums.length - количество строк
nums[i].length - количество элментов в каждой строке.

5. Объясните ситуации, когда в java-коде могут возникнуть следующие исключительные ситуации
java.lang.ArrayIndexOutOfBoundsException и java.lang.ArrayStoreException.
-----------------------------------------------------------------------------------------------------------------
ArrayIndexOutOfBoundsException – это исключение, появляющееся во время выполнения. Оно возникает тогда, когда мы
пытаемся обратиться к элементу массива по отрицательному или превышающему размер массива индексу.

Исключение ArrayStoreException
Если попытаться записать в ячейку массива ссылку на объект неправильного типа, возникнет исключение
ArrayStoreException.

6. Объясните, зачем при кодировании разделять решаемую задачу на методы. Поясните, как вы понимаете выражение:
“Один метод не должен выполнять две задачи”.
---------------------------------------------------------------------------------------------------------------
Чем проще кусок выполянемой задачи, тем рпоще понимание и чтение все программы в целом. Метод должен делать что-то
одно, либо должен быть разделен не 2 метода.

7. Объясните, как в Java передаются параметры в методы, в чем особенность передачи в метод значения примитивного
типа, а в чем ссылочного.
------------------------------------------------------------------------------------------------------------------

В Java существует 2 способа для передачи переменной или объекта класса в функцию:

- передача по значению. В этом случае значение аргумента копируется в формальный параметр функции. Поскольку
создается копия аргумента в функции, то все изменения над копией не повлияют на значение аргумента;
- передача по ссылке (по адресу). В этом случае параметру передается ссылка на аргумент, который используется
при вызове. По этой ссылке есть доступ к аргументу. Таким образом, все изменения, сделанные в теле функции
над значением параметра, будут изменять значение аргумента который был передан в функцию.

8. Объясните, как в метод передать массив. И как массив вернуть из метода. Можно ли в методе изменить размер
переданного массива.
-----------------------------------------------------------------------------------------------------------------

public int[] gerArray(int[] array) {
  int[] result;
  ....some magic

  return result;
}

Длинна массивов неизмена. Можно создать новый нужной длины и скопировть в него старый массив.

9. Поясните, что означает выражение ‘вернуть значение из метода’. Как можно вернуть значение из метода. Есть ли
разница при возврате значений примитивного и ссылочного типов.
-----------------------------------------------------------------------------------------------------------------
см. пред. ответ.

10. Перечислите известные вам алгоритмы сортировки значений, приведите код, реализующий это алгоритмы.

Простейшая сортировка (Bubble Sort)
Сортировка выбором (Selection Sort)
Сортировка вставками (Insertion Sort)
Челночная сортировка (Shuttle Sort)
Сортировка Шелла
Сортировка слиянием (merge sort)
Сортировка подсчётом (Counting Sort) и Поразрядная сортировка (Radix Sort)
Быстрая сортировка (Quick Sort)