1. Объясните, что имеется в виду, когда говорится: Java-язык программирования и Java-платформа.
------------------------------------------------------------------------------------------------------
Программная платформа Java — ряд программных продуктов и спецификаций компании Sun Microsystems,
ранее независимой компании, а ныне дочерней компании корпорации Oracle, которые совместно предоставляют систему
для разработки прикладного программного обеспечения и встраивания её в любое кросс-платформенное программное
обеспечение. Java используется в самых разных компьютерных платформах от встраиваемых устройств и мобильных
телефонов в нижнем ценовом сегменте, до корпоративных серверов и суперкомпьютеров в высшем ценовом сегменте.

Программная платформа Java:
- Java Card: Технология, которая позволяет небольшим Java-приложениям (апплетам) надежно работать
на смарт-картах и других подобных устройств c малым объёмом памяти.
- Java ME: Включает в себя несколько различных наборов библиотек (известных как профили)
для устройств с ограниченным объёмом места для хранения, небольшим размером дисплея и батареи.
Часто используется для разработки приложений для мобильных устройств, КПК, ресиверов цифрового
телевидения и принтеров.
- Java SE: для использования на настольных ПК, серверах и другом подобном оборудовании.
- Java EE: Java SE плюс API, полезное для многоуровневых клиент-серверных бизнес-приложений.

Java - строго типизированный объектно-ориентированный язык программирования, разработанный компанией
Sun Microsystems (в последующем приобретённой компанией Oracle). Разработка ведётся сообществом,
организованным через Java Community Process, язык и основные реализующие его технологии
распространяются по лицензии GPL. Права на торговую марку принадлежат корпорации Oracle.

2. Поясните, как связаны имя java-файла и классы, которые в этом файле объявляются.
-------------------------------------------------------------------------------------------------------------
Все IDE предполагают, что исходный код класса с модификатором public хранится в файле с точно таким же именем,
как и имя класса, и расширением .java.
Несоблюдение этого соглашения может стать причиной многих проблем, которые выявятся во время компиляции.

3. Расшифруйте аббревиатуры JVM, JDK и JRE; покажите, где “они находятся” и что собой представляют.
---------------------------------------------------------------------------------------------------------------
JVM = Java Virtual Machine (сокращенно Java VM, JVM) — виртуальная машина Java — основная часть исполняющей
системы Java, так называемой Java Runtime Environment (JRE). Виртуальная машина Java исполняет байт-код Java,
предварительно созданный из исходного текста Java-программы компилятором Java (javac). JVM может также
использоваться для выполнения программ, написанных на других языках программирования.

JVM является ключевым компонентом платформы Java. Так как виртуальные машины Java доступны для многих
аппаратных и программных платформ, Java может рассматриваться и как связующее программное обеспечение,
и как самостоятельная платформа. Использование одного байт-кода для многих платформ позволяет описать
Java как «скомпилировано однажды, запускается везде» (compile once, run anywhere).

Виртуальные машины Java обычно содержат интерпретатор байт-кода, однако, для повышения производительности во
многих машинах также применяется JIT-компиляция часто исполняемых фрагментов байт-кода в машинный код.

Когда разработчики говорят о JVM, обычно имеют в виду процесс, запущенный на устройстве,
который предоставляет и контролирует использование ресурсов Java приложением.
Спецификация JVM описывает требования для разработки программ, выполняющих эти задачи

JDK = Java Development Kit (сокращенно JDK) — бесплатно распространяемый компанией Oracle Corporation
(ранее Sun Microsystems) комплект разработчика приложений на языке Java, включающий в себя компилятор Java (javac),
стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java (JRE).
В состав JDK не входит интегрированная среда разработки на Java, поэтому разработчик, использующий только JDK,
вынужден использовать внешний текстовый редактор и компилировать свои программы, используя утилиты командной строки.

Все современные интегрированные среды разработки приложений на Java, такие, как JDeveloper, NetBeans IDE,
Sun Java Studio Creator, IntelliJ IDEA, Borland JBuilder, Eclipse, опираются на сервисы, предоставляемые JDK.
Большинство из них для компиляции Java-программ используют компилятор из комплекта JDK. Поэтому эти среды
разработки либо включают в комплект поставки одну из версий JDK, либо требуют для своей работы предварительной
инсталляции JDK на машине разработчика.

JRE = Java Runtime Environment (сокр. JRE; русск. среда выполнения для Java) — минимальная реализация виртуальной
машины, необходимая для исполнения Java-приложений, без компилятора и других средств разработки.
Состоит из виртуальной машины — Java Virtual Machine — и библиотеки Java-классов.

JRE распространяется свободно и для большинства платформ может быть загружена с сайта Oracle.

4. Объясните, как скомпилировать и запустить приложение из командной строки, а также зачем в переменных
среды окружения прописывать пути к установленному jdk.
-----------------------------------------------------------------------------------------------------------------
Для копиляции необохдимо воспользоваться компилятором из JDK
Из терминала (cmd.exe):
C:\%path_to_file%\javac -filename.java

После компиляции на выходе мы получаем файл с байт-кодом filename.class, который мы можем исполнить
при помощи установленной на нашем компьютере java-машины командой java в командной строке:

C:\%path_to_file%\java filename

Classpath — это путь, относительно которого виртуальная машина будет искать пакеты и скомпилированные классы.
Тоесть, таким образом  мы говорим виртуальной машине какие директории в файловой системе являются корневыми
для иерархии пакета Java. Classpath можно укзать при запуска программы с помощью флага -classpath.

А пути к установленному JDK прописываем, чтобый коммандая строка смогк найти javax.exe и java.exe

5. Перечислите атрибуты доступа, объясните их действие.
-----------------------------------------------------------------------------------------------------------------
Всего в Java есть четыре модификатора доступа. Перечислим их в порядке от самых строгих до самых «мягких»:
- private;
- default (package visible);
- protected;
- public.

public: публичный, общедоступный класс или член класса. Поля и методы, объявленные с модификатором public,
видны другим классам из текущего пакета и из внешних пакетов.

private: закрытый класс или член класса, противоположность модификатору public. Закрытый класс или член класса
доступен только из кода в том же классе.

protected: такой класс или член класса доступен из любого места в текущем классе или пакете или в производных
классах, даже если они находятся в других пакетах

Модификатор по умолчанию. Отсутствие модификатора у поля или метода класса предполагает применение к нему
модификатора по умолчанию. Такие поля или методы видны всем классам в текущем пакете
(default = protected - наследование)

6. Что такое пакеты в java-программе, что представляют собой пакеты на диске? Каково соглашение по
именованию пакетов? Как создать пакет?
-----------------------------------------------------------------------------------------------------------------
Java package (пакет Java) — механизм, позволяющий организовать Java классы в пространстве имен.
Обычно в пакеты объединяют классы одной и той же категории, либо предоставляющие сходную функциональность.
Каждый пакет предоставляет уникальное пространство имен для своего содержимого. Допустимы вложенные пакеты.

Как правило, названия пакетов соответствуют физической структуре проекта, то есть организации каталогов,
в которых находятся файлы с исходным кодом. А путь к файлам внутри проекта соответствует названию пакета
этих файлов

Пакеты всегда пишутся строчными буквами. В отличие от классов, где первая буква обычно является заглавной.
Чтобы избежать создания пакетов с такими же именами, как у других общедоступных, рекомендуется начинать
иерархию с обратного доменного имени вашей компании. Например, поскольку доменное имя компании – blog.com,
надо начать со структуры с именем com.blog. Другими словами, пакет верхнего уровня с именем com с подпакетом
внутри называется blog.

Чтобы создать пакет, вы должны сначала создать корневой каталог на вашем жестком диске. Он сам по себе не
является частью структуры пакета. Содержит все исходные коды, которые должны войти в структуру.

Создав исходный корневой каталог, вы можете начать добавлять в него подкаталоги. Каждый подкаталог
соответствует пакету. Вы можете добавить подкаталоги в подкаталоги, чтобы создать более глубокую структуру

7. Объясните, какие классы, интерфейсы, перечисления необходимо импортировать в вашу программу, как
это сделать. Влияет ли импорт пакета на импорт классов и др., лежащего в подпакетах? Какой пакет в Java
импортируется по умолчанию?
-----------------------------------------------------------------------------------------------------------------
Если нам надо использовать классы из других пакетов, то нам надо подключить эти пакеты и классы.
Исключение составляют классы из пакета java.lang (например, String), которые подключаются в программу автоматически.

Для импорта пакетов и классов в проект с помощью директивы import, которая указывается после директивы package:

8. Объясните различия между терминами “объект” и “ссылка на объект”.
-----------------------------------------------------------------------------------------------------------------
объект - это экземпляр класса
ссылка на объект - ссылка это число, просто номер ячейки в памяти, где объект располагается

9. Какие примитивные типы Java вы знаете, как создать переменные примитивных типов? Объясните
процедуру, по которой переменные примитивных типов передаются в методы как параметры.
-----------------------------------------------------------------------------------------------------------------
В Java есть 8 примитивных типов, которые делят на 3 группы, вот они:

- Целые числа — byte, short, char, int, long
- Числа с плавающей точкой (иначе дробные) — float, double
- Логический — boolean

А также переменные ссылочный типа называется ссылкой. Не содержит объект, но содержит ссылку на него,
которая указывает на другое место в памяти, где он хранится.

Общий шаблон для создания переменной прмитивного типа:
Type name = value
int a = 5;
int a;

В Java существует 2 способа для передачи переменной или объекта класса в функцию:

- передача по значению. В этом случае значение аргумента копируется в формальный параметр функции. Поскольку
создается копия аргумента в функции, то все изменения над копией не повлияют на значение аргумента;
- передача по ссылке (по адресу). В этом случае параметру передается ссылка на аргумент, который используется
при вызове. По этой ссылке есть доступ к аргументу. Таким образом, все изменения, сделанные в теле функции
над значением параметра, будут изменять значение аргумента который был передан в функцию.

Если методу передается аргумент примитивного типа, то происходит передача по значению. То есть, делается копия
ргумента.

В отличие от переменных примитивных типов, объекты класса передаются по ссылке. Это значит, что изменения,
сделанные в теле функции (методе) будут изменять также значения объекта, который задавался в качестве аргумента.

10. Каков размер примитивных типов, как размер примитивных типов зависит от разрядности платформы, что
такое преобразование (приведение) типов и зачем оно необходимо? Какие примитивные типы не приводятся
ни к какому другому типу.
-----------------------------------------------------------------------------------------------------------------
byte	8 бит	от -128 до 127
short	16 бит	от -32768 до 32767
char	16 бит	беззнаковое целое число, представляющее собой символ UTF-16 (буквы и цифры)
int	32 бит	от -2147483648 до 2147483647
long 64 бит	от -9223372036854775808L до 9223372036854775807L
float	32 бит	от 1.4e-45f до 3.4e+38f
double	64 бит от 4.9e-324 до 1.7e+308

В стандартной реализации Sun JVM и Oracle HotSpot JVM тип boolean занимает 4 байта (32 бита), как и тип int.
Однако, в определенных версия JVM имеются реализации, где в массиве boolean каждое значение занимает по 1-му биту.

Спецификация Java абстрагируется от физического уровня и говорит лишь о том какие значения могут принимать
примитивы и какое байтовое представление будет видеть Java код - эти значения не зависят от разрядности. Но это
также значит что в зависимости от реализации JVM кол-во байт которое физически отводится под тип может отличаться:

Quote:
This, for example, allows boolean fields to take 1, 2, 4 bytes in some implementations.

Переменной большего размера всегда можно присваивать переменные меньшего размера. Такое преобразование, от типа
меньшего размера к большему, называется расширением типа. Переменной типа long спокойно можно присваивать
переменные типа int, short и byte. Переменной типа int можно присваивать переменные типа short и byte. Ну и
переменной типа short можно присваивать переменные типа byte.

Типы byte, short, char всегда преобразовываются в тип int при взаимодействии между собой. НЕ ЯВНО

Преобразование от типа большего размера к меньшему — называют сужением типа. При таком присваивании
часть числа может просто не поместиться в новую переменную и «остаться за бортом». В таких ситуациях
Java-компилятор требует от программиста указывать оператор преобразования типа ЯВНО.
Выглядит в общем виде он так: (тип) выражение;

Boolean не приводятся ни к одному другому примтивному типа, как на самом деле и ссылки.

11. Объясните, что такое явное и неявное приведение типов, приведите примеры, когда такое преобразование
имеет место.
-----------------------------------------------------------------------------------------------------------------
см. пред. ответ.

12. Что такое литералы в Java-программе, какую классификацию литералов вы знаете, как записываются
литералы различных видов и типов в Java-программе?
------------------------------------------------------------------------------------------------------------------
Все литералы — это примитивные значения (строки, числа, символы, булевы значения). Нельзя создать литерал-объект.
Единственный литерал, связанный с объектом — это null.

В соответствии с примитивами, литералы также делятся на разделы:
1. Числовые:
- Целочисленные;
long a1 = 220433L; L и l - литерал Long'a
int x1 = 878; - десятичный литерал
int six = 06 - восмиричный
int a1 = 0X0005; - щестнадцатеричные литералы 0x или 0X
int i1 = 0b101; - двоичные литералы 0b или 0B
- С плавающей точкой;
double d2 = .4;
float f3 = 78.45f;
double d5 = 54.32d;
double d6 = 1.5e14;

Начиная с Java 7, добавлена возможность использовать любое количество символов подчеркивания для разделения
групп цифр, что улучшает читабельность.

int i1 = 12_567;

2. Строковые;
String str1 = "MyProgram";

3. Символьные;
char c1 = 'n';
char letterO = '\u004F'; // Буква 'O' в шестнадцатеричной форме
char letter_a = '\141'; // Буква 'a' в восьмеричной форме

4. Логические.
boolean b1 = true;

13. Как осуществляется работа с типами при вычислении арифметически выражений в Java?
---------------------------------------------------------------------------------------------------------------
Для стандартных арифметических операций, таких как сложение, вычитание, умножение, деление в Java используются
традиционные символы, к которым мы привыкли со школы:

int a, b;
int sum = a + b;
int sub = a - b;
int mult = a * b;
int div = a / b;

Примечание: при операции деления, если оба аргумента являются целыми числами, то в результате получим целое число.
Дробная часть, если такая имеется, отбросится. Если хотим получить число с дробной частью, то нужно, чтобы один
из аргументов был типа double. Это можно указать в самом выражении при помощи добавления после числа .0 или .d.

В Java также имеется специальный оператор %, обозначающий остаток от делния.

Операции с присваиванием

int count=0;
count = count + 2;
мы можем записать сокращенно

count += 2;
+= это оператор сложения с присваиванием.

int a = 5;
int sum += a; // эквивалентно sum = sum + a;
int sub -= a; // эквивалентно sub = sub - a;
int mult *= a; // эквивалентно mult = mult * a;
int div /= a; // эквивалентно div = div / a;
int mod %= a; // эквивалентно mod = mod % a;


Инкрементирование и декрементирование
Инкремент, обозначается ++ и увеличивает значение переменной на единицу. Декремент обозначается — и уменьшает
значение на единицу. С инкрементом и декрементом мы часто встречаемся в цикле for.

Инкремент и декремент бывают двух форм

Префиксная форма:

int k = 3;
++k; // k = 4
--k; // k = 3
Постфиксная форма

int k = 3;
k++; // k = 4
k--; // k = 3
Различие префиксной и постфиксной формы проявляется только  тогда, когда эти операции присутствуют в выражениях.
Если форма префиксная, то сначала произойдет увеличение (или уменьшение) переменной на единицу, а потом с новым
значением будет произведены дальнейшие вычисления. Если форма постфиксная, то расчет выражения будет происходить
со старым значением переменной, а переменная увеличится (или уменьшится) на единицу после вычисления выражения.

Часто происходит не явное приведение типов. см. вопрос № 10

14. Что такое классы-оболочки, для чего они предназначены? Объясните, что значит: объект класса оболочки
– константный объект.
-----------------------------------------------------------------------------------------------------------------
объект класса оболочки – константный объект = immutable(неизменный).

Классы-оболочки Java являются Объектным представлением восьми примитивных типов в Java. Все классы-оболочки в
Java являются неизменными и final. Начиная с Java 5 автоупаковка и распаковка позволяет легко конвертировать
примитивные типы в их соответствующие классы-оболочки и наоборот.

byte	Byte
short	Short
int	Integer
long	Long	l
float	Float	f
double	Double
char	Character
boolean	Boolean

Разработчиками языка Java было принято очень умное решение отделить примитивные типы и классы-оболочки,
указав при этом следующее:

 - Используйте классы-обертки, когда работаете с коллекциями.
 - Используйте примитивные типы для того, чтобы ваши программы были максимально просты.
Еще одним важным моментом является то, что примитивные типы не могут быть null, а классы-оболочки — могут.

15. Объясните разницу между примитивными и ссылочными типами данных. Поясните существующие различия,
при передаче параметров примитивных и ссылочных типов в методы. Объясните, как константные объекты
ведут себя при передаче в метод.
-----------------------------------------------------------------------------------------------------------------
см. ответ. № 9

16. Поясните, что такое автоупаковка и автораспаковка.
-----------------------------------------------------------------------------------------------------------------
Автоупаковка и распаковка появилась еще в Java 5. Они представляют собой удобный способ для автоматического
преобразования примитивных типов данных в классы-оболочки Java и наоборот.

Автоупаковка в Java
Преобразование примитивного типа данных в объект соответствующего класса-оболочки называется автоупаковкой.
Например, преобразование int в Integer или преобразования long в Long-объект.

Компилятор Java применяет автоупаковку при таких значениях примитива:

Примитив пришел в параметр метода, который ожидает объект соответствующего класса-оболочки. Например, в метод с
параметром Integer можно передавать int — компилятор Java будет преобразовывать int в Integer.
Присваивание переменной значение соответствующего класса-оболочки. Например, переменная типа Long может
принимать long.

Распаковка в Java
Присваивание объекта класса-оболочки переменной примитивного типа. Например, переменная типа
long может принимать Long.

Компилятор Java применяет распаковку в таком случае:

Объект класса-оболочки пришел в параметр метода, который ожидает значение соответствующего примитивного типа.
Присваивание переменной примитивного типа соответствующего объекта класса-оболочки.

17. Перечислите известные вам арифметические, логические и битовые операторы, определите случаи их
употребления. Что такое приоритет оператора, как определить, в какой последовательности будут
выполняться операции в выражении, если несколько из них имеют одинаковый приоритет.
-----------------------------------------------------------------------------------------------------------------

Операторы присваивания

Арифметические операторы
+	Сложение (также используется для конкатенации строк)
—	Вычитание
*	Умножение
/	Деление
%	Остаток от деления

Унарные операторы
+	Унарный плюс (не нужен, так как числа положительные и без него).
—	Унарный минус; инвертирует знак выражения.
++	Оператор инкремента; увеличивает значение на 1.
—	Оператор декремента; уменьшает значение на 1.
!	Оператор логического отрицания; инвертирует значение булевой переменной

Операторы равенства и отношений
==	равен	5 == 3 результат false
!=	неравен	5 != 3 результат true
>	Больше	5 > 3 результат true
<	меньше	5 < 3 результат false
>=	Больше или равен	5 >= 5 результат true
<=	Меньше или равен	5 <= 5 результат true

Оператор instanceof

Логические операторы
||	условное-ИЛИ; true если хотя бы одно из булевых выражений истинно (true)	false || true результат — true
&&	условное-И; истинно если все булевы выражения истинны (true).	false && true результат — false

Тернарный оператор

Побитовые операторы и смещение битов
~	Побитовое дополнение.
<<	Левый сдвиг.
>>	Правый сдвиг.
>>>	Беззнаковый правый сдвиг.
&	Побитовое И.
^	Побитовое исключающее ИЛИ.
|	Побитовое включающее ИЛИ

Другие операторы присваивания
+=	x += 5	x = x + 5
-=	x -= 5	x = x – 5
*=	x *= 5	x = x * 5
/=	x /= 5	x = x / 5
%=	x %= 5	x = x / 5
<<=	x <<= 5	x = x << 5
>>=	x >>= 5	x = x >> 5
&=	x &= 5	x = x & 5
^=	x ^= 5	x = x ^ 5
|=	x |= 5	x = x | 5

Поприоритет операция

Во время выполнения операций можно задавать приоритет выполнения с помощью скобок (операции в скобках выполняются
раньше). Если скобки отсутствуют, выполняются сначала более приоритетные операции. Ниже приведена таблица
приоритета выполнения операций.

++, —	 постинкремент, постдекремент	 справа налево
++, —, +, -, ~, !	 преинкремент, предекремент, унарный плюс, унарный минус, поразрядное дополнение,
булево «не»	 справа налево
*, /, %	 умножение, деление, остаток от деления	 слева направо
+, —	 сложение, вычитание	 слева направо
<<, >>, >>>	 сдвиг влево, сдвиг вправо, беззнаковый сдвиг вправо	 слева направо
<, >, <=, >=, instance of	 меньше, больше, меньше или равно, больше или равно, сравнить тип	 слева направо
==, !=	 равно, не равно	 слева направо
&	 битовое «и»	 слева направо
^	 исключающее «или»	 слева направо
|	 битовое «или»	 слева направо
&&	 логическое «и»	 слева направо
||	 логическое «или»	 слева направо
 ?:	 тернарный оператор	 слева направо
 =, +=, -=,*=, /=, %=, &=, ^=,  |=, <<=, >>=, >>>=	 операторы присваивания	 справа налево

18. Укажите правила выполнения операций с плавающий точкой в Java (согласно стандарту IEEE754). Как
определить, что результатом вычисления стала бесконечность или нечисло?
------------------------------------------------------------------------------------------------------------------

NaN (англ. Not-a-Number) — одно из особых состояний числа с плавающей запятой. Используется во многих
математических библиотеках и математических сопроцессорах. Данное состояние может возникнуть в различных случаях,
например, когда предыдущая математическая операция завершилась с неопределённым результатом, или если в ячейку
памяти попало не удовлетворяющее условиям число.

В соответствии с IEEE 754, такое состояние задаётся через установку показателя степени в зарезервированное
значение 11…11, а мантиссы — во что угодно, кроме 0 (зарезервированное значение для машинной бесконечности).
Знак и мантисса могут нести какую-то дополнительную информацию: многие библиотеки «отрицательный»
NaN выводят как -NaN.

К операциям, приводящим к появлению NaN в качестве ответа, относятся:

все математические операции, содержащие NaN в качестве одного из операндов;
деление нуля на нуль;
деление бесконечности на бесконечность;
умножение нуля на бесконечность;
сложение бесконечности с бесконечностью противоположного знака;
вычисление квадратного корня отрицательного числа[1];
логарифмирование отрицательного числа.

В некоторых языках программирования есть «тихий» и «сигнальный» NaN: первый, попав в любую операцию, возвращает
NaN, второй — вызывает аварийную ситуацию. Обычно «тихий» или «сигнальный» определяется старшим битом мантиссы.

NaN не равен ни одному другому значению (даже самому себе[2]); соответственно, самый простой метод проверки
результата на NaN — это сравнение полученной величины с самой собой.

В Java тип double имеет специальные значения для понятий «плюс бесконечность» и «минус бесконечность».
Положительное число, разделенное на 0.0, дает «плюс бесконечность», а отрицательное – «минус бесконечность».
Этим понятиям соответствуют специальные константы типа Double:

public static final double POSITIVE_INFINITY = 1.0 / 0.0;	плюс бесконечность
public static final double NEGATIVE_INFINITY = -1.0 / 0.0;	минус бесконечность

Строку конвертируем в число, а в ней есть буквы. Ответ — NaN
Бесконечность минус бесконечность. Ответ — NaN
Многие другие ситуации, где в ответе ждут число, а получается неизвестно что.
Любая операция, где есть NaN, дает в результате NaN.

Действия с бесконечностью:

n ÷ ±Infinity	0
±Infinity × ±Infinity	±Infinity
±(не ноль) ÷	±Infinity
Infinity + Infinity	Infinity
±0 ÷ ±0	NaN
Infinity - Infinity	NaN
±Infinity ÷ ±Infinity	NaN
±Infinity × 0	NaN

double inf = Double.POSITIVE_INFINITY;
System.out.println(inf + 5);
System.out.println(inf - inf); // same as Double.NaN
System.out.println(inf * -1);

19. Что такое статический импорт, какие элементы можно импортировать при статическом импорте.
-----------------------------------------------------------------------------------------------------------------
В Java имеется языковое средство, расширяющее возможности ключевого сло­ва import и называемое статическим импортом.

Оператор import, предваряемый ключевым словом static, можно применять для импорта статических членов класса
или интерфейса. Благодаря статическому импорту появляется возможность ссылаться на статические члены
непосредственно по именам, не угочняя ихименем класса.

20. Объясните работу операторов if, switch, while, do-while, for, for-each. Напишите корректные примеры
работы этих операторов.
-----------------------------------------------------------------------------------------------------------------
if, switch - услоыне операторы
while, do-while, for, for-each - операторы циклов.

21. Объясните работу оператора instance of. Что будет результатом работы оператора, если слева от него будет
стоять ссылка, равная null?

Оператор instanceof нужен, чтобы проверить, был ли объект, на который ссылается переменная X,
создан на основе какого-либо класса Y.

Оператор instanceof возвращает значение true, если проверка показала истинность, или false,
если результат был ложным.

The expression x instanceof SomeClass is false if x is null.
From the Java Language Specification, section 15.20.2, "Type comparison operator instanceof":